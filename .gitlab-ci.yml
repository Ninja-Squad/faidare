---
stages:
  - pre-build
  - test
  - build
  - deploy-beta
  - deploy-staging
  - deploy-production


image: registry.forgemia.inra.fr/urgi-is/docker-rare/docker-browsers:latest


# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE_USER_HOME: $CI_PROJECT_DIR/.gradle
  APP_NAME: faidare
  JAR_PATH: "backend/build/libs/${APP_NAME}.jar"
  GIT_DEPTH: 0
  IMAGE_TAG: $CI_COMMIT_REF_SLUG
  ELASTIC_VERSION: "6.6.2"
  DOCKER_OPTS: "--mtu=1450"

# Gradle cache for all jobs
cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - ".gradle"
    - "frontend/.gradle/"
    - "frontend/node_modules/"

# PRE-BUILD

build-loader-docker-image:
 image: registry.forgemia.inra.fr/urgi-is/docker-rare/docker-git:latest
 stage: pre-build
 services:
  - docker:20.10.6-dind
 script:
  # build the image
  - docker build -t registry.forgemia.inra.fr/urgi-is/docker-rare/faidare-loader:${IMAGE_TAG} .
  - docker build -t registry.forgemia.inra.fr/urgi-is/docker-rare/faidare-loader:latest .
  # Login before pushing the image
  - docker login registry.forgemia.inra.fr -u $CONTAINER_REGISTRY_USERNAME -p $CONTAINER_REGISTRY_TOKEN
  # push the built image
  - docker push registry.forgemia.inra.fr/urgi-is/docker-rare/faidare-loader:${IMAGE_TAG}
  # only push latest tag on master branch
  - if [ "master" == "${CI_COMMIT_REF_SLUG}" ] ; then docker push registry.forgemia.inra.fr/urgi-is/docker-rare/faidare-loader:latest ; fi;
 only:
  changes:
   - scripts/*
   - backend/src/test/resources/fr/inra/urgi/faidare/repository/es/setup/index/*_mapping.json
   - backend/src/test/resources/fr/inra/urgi/faidare/repository/es/setup/index/settings.json
   - .gitlab-ci.yml
 allow_failure: true


# TESTS


lint:
  stage: test
  tags:
    - openstack
  script: "./gradlew lint"
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - ".gradle"
      - "frontend/.gradle/"
      - "frontend/node_modules/"


test-and-sonarqube:
  stage: test
  tags:
    - openstack
  # the backend tests need an elasticsearch instance
  services:
    # even if that would be ideal
    # we can't just launch the service with just elasticsearch:6.3.1
    # because we need to pass some variables, but they are passed to _all_ containers
    # so they fail the start of other docker images like urgi/docker-browsers
    # the only solution is to override the entrypoint of the service and pass the arguments manually
    - name: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
      alias: elasticsearch
      # discovery.type=single-node
      # single-node is necessary to start in development mode
      # so there will be no bootstrap checks that would fail on CI
      # especially the error regarding
      # `max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]`
      command: ["bin/elasticsearch", "-Ediscovery.type=single-node"]
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=true"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_COMMIT_REF_NAME}"
    policy: pull-push
    paths:
      - ".gradle"
      - "frontend/.gradle/"
      - "frontend/node_modules/"
      - .sonar/cache
  script:
    - ./gradlew :frontend:assemble --parallel
    - ./gradlew :backend:test jacocoTestReport --parallel
    - find /tmp/node/*/bin -name node -exec ln -s {} /tmp/node/node \;
    - export PATH="/tmp/node/:$PATH"
    - ./gradlew -s sonarqube -x test
  artifacts:
    reports:
      junit:
        - ./backend/build/test-results/test/TEST-*.xml
        # - ./frontend/karma-junit-tests-report/TEST*.xml
  only:
    refs:
      - merge_requests


test-and-sonarqube-master:
  extends: test-and-sonarqube
  only:
    refs:
      - master


# BUILD


build:
  tags:
    - openstack
  stage: build
  script:
    - ./gradlew assemble
  cache:
    key: "${CI_COMMIT_REF_NAME}"
    policy: pull
    paths:
      - ".gradle"
      - "frontend/.gradle/"
      - "frontend/node_modules/"
  artifacts:
    paths:
      - "$JAR_PATH"
    expire_in: 1 week


.restart-config-server: &restart_config_server
  stage: build
  script:
  - eval $(ssh-agent -s)
  - ssh-add <(echo "${SSH_PRIVATE_KEY}")
  - ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} 'echo "Successfully connected on $(hostname)"'
  - ssh ${SERVER_USER}@${SERVER_IP} "sudo systemctl restart bootapp@config-server"
  - eval $(ssh-agent -k)
  allow_failure: true

restart-config-server-proxmox:
 variables:
  SERVER_IP: ${SERVER_IP_PROXMOX}
  SERVER_USER: ${SERVER_USER_PROXMOX}
 <<: *restart_config_server

restart-config-server-openstack:
 tags:
  - openstack
 variables:
  SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
  SERVER_USER: ${SERVER_USER_OPENSTACK}
 <<: *restart_config_server


# DEPLOY


.deploy-to-vm: &deploy_to_vm
  # Hidden job which serves as template for executed jobs below.
  # See https://docs.gitlab.com/ee/ci/yaml/#anchors
  retry: 2
  script:
    ## SSH initialization
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${SSH_PRIVATE_KEY}")
    - ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} 'echo "Successfully connected on $(hostname)"'
    # Copy jar
    - scp ./backend/build/libs/${APP_NAME}.jar ${SERVER_USER}@${SERVER_IP}:/tmp/${APP_NAME}-${ENV}.jar
    - ssh ${SERVER_USER}@${SERVER_IP} "sudo mv /tmp/${APP_NAME}-${ENV}.jar /opt/bootapp/${APP_NAME}-${ENV}.jar ; sudo chown -R bootapp:bootapp /opt/bootapp/"
    # Restarting service with the updated jar and the according Spring profiles enabled
    - ssh ${SERVER_USER}@${SERVER_IP} "sudo systemctl restart bootapp@${APP_NAME}-${ENV}"
    - eval $(ssh-agent -k)
    - echo "Deploy done. Application should be available at http://${SERVER_IP}:${APP_PORT}/${CONTEXT_PATH}"
  only:
    changes:
      - .gitlab-ci.yml
      - backend/src/**/*
      - frontend/**/*
  allow_failure: false

deploy-to-beta:
  tags:
   - openstack
  stage: deploy-beta
  extends: .deploy-to-vm
  variables:
    SERVER_USER: ${SERVER_USER_OPENSTACK}
    SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
    APP_PORT: ${BETA_FAIDARE_PORT}
    ENV: beta
    CONTEXT_PATH: faidare-beta
  except:
    refs:
      - master
  only:
    refs:
      - branches
  when: always

deploy-to-staging:
  tags:
   - openstack
  stage: deploy-staging
  extends: .deploy-to-vm
  variables:
    SERVER_USER: ${SERVER_USER_OPENSTACK}
    SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
    APP_PORT: ${STAGING_FAIDARE_PORT}
    ENV: staging
    CONTEXT_PATH: faidare-staging
  only:
    refs:
      - branches
  except:
    refs:
      - master
  when: manual

deploy-to-int:
  tags:
   - proxmox
  stage: deploy-production
  extends: .deploy-to-vm
  variables:
    SERVER_USER: ${SERVER_USER_PROXMOX}
    SERVER_IP: ${SERVER_IP_PROXMOX}
    APP_PORT: ${INT_FAIDARE_PORT}
    ENV: int
    CONTEXT_PATH: faidare-int
  only:
    refs:
      - master
  when: manual

deploy-to-prod-public:
  tags:
   - proxmox
  stage: deploy-production
  extends: .deploy-to-vm
  variables:
    SERVER_USER: ${SERVER_USER_PROXMOX}
    SERVER_IP: ${SERVER_IP_PROXMOX}
    APP_PORT: ${PROD_PUBLIC_FAIDARE_PORT}
    ENV: prod-public
    CONTEXT_PATH: faidare
  only:
    refs:
      - master
  when: manual

deploy-to-prod-private:
  tags:
   - proxmox
  stage: deploy-production
  extends: .deploy-to-vm
  variables:
    SERVER_USER: ${SERVER_USER_PROXMOX}
    SERVER_IP: ${SERVER_IP_PROXMOX}
    APP_PORT: ${PROD_PRIVATE_FAIDARE_PORT}
    ENV: prod-private
    CONTEXT_PATH: faidare-private
  only:
    refs:
      - master
  when: manual
